{load_file("stdrun.hoc")}
{load_file("nrngui.hoc")}

/////////////////////// Pyramidal Cells //////////////////////////////
// Created by FF (2016)
// 3-comp LA pyramidal cells template (with osci)

/////====================/////
///// CP cell borrowed from Type C cell in LA  /////
/////===================/////
// Threshold ~ -56 mV  raise the input, rest ~-65 mV

begintemplate CP_Cell
	public soma, dend, apic, connect2target, type, insert_mechs
	create soma[1], dend[1], apic[1]
	strdef type

	public noise, noiseRandObj
	objref noise, noiseRandObj
	public all, somatic, basal, apical, axonal
	objref all, somatic, basal, apical, axonal

	proc init() {
		type = "Cell_C"	

		all = new SectionList()
		somatic = new SectionList()
		basal = new SectionList()
		apical = new SectionList()

		soma[0] all.append()
		soma[0] somatic.append()
		dend[0] all.append()
		dend[0] basal.append()
		apic[0] all.append()
		apic[0] apical.append()

		gUnf_Xsoma = 2.5e-05
		Rm = 80000 // decreased overall
		SpineScale = 1.76371308 //2
		SpineScale_leak = 1.763714578
		Cm = 2.4 // 1.8 // 2 //1
		RaAll= 150//200
		RaSoma= 150 // 146.969697
		RaDend = 150
		RaAxIs = 150//100//200
		Vpas = -72//-65//-70 // -67

		//         Conductance values         //
		gna = 0.015
		gnap = 0.000555 // 0.000551 
		gkdr = 0.002//0.002 
		ghd = 1.5e-5//1.5e-5
		gca = 5.5e-4 
		gm = 0.00224 // 0.00222  
		gsAHP = 0.0002//0.0012
		gkap = 0.002 
		gleak = 2.5e-5 
		gleak_dend=1.57*3.0e-5
			
		nash=10
		Vrest = -70
		celsius = 31.0 
		
		/////// topology ////////
		connect dend[0](0), soma[0](0)
		connect apic[0](0), soma[0](1)
		
		/////// geometry ////////
		// dendrites along z axis
		Lsoma = 25.0
		Ldend = 270
		Lapic = 555
		soma[0] {
			diam = 24.75 nseg = 1
			pt3dadd(0,0,-Lsoma/2,diam)
			pt3dadd(0,0,Lsoma/2,diam)
		}		//{L = 20 diam = 20 nseg = 13}
		dend[0] {
			diam = 3 nseg = 8
			pt3dadd(0,0,0,diam)
			pt3dadd(0,0,-Ldend,diam)
		}     // 3.5
		apic[0] {
			diam = 5 nseg = 7
			pt3dadd(0,0,0,diam)
			pt3dadd(0,0,Lapic,diam)
		} 
		
		access soma[0]
		//distance()
		
		apic[0] {
			insert cadyn gcabar_cadyn = gca eca = 120
			insert leak el_leak = -72  glbar_leak = gleak_dend Ra=RaDend cm = Cm // 2.5
			insert hd ghdbar_hd = ghd 
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = gna
			insert nap gbar_nap = 0  gbar_nap(1/(2*nseg)) = 0.8*gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 
			insert sAHP gsAHPbar_sAHP = 0
			insert im gbar_im = 0 gbar_im(1/(2*nseg)) = 0.8*gm
			insert kap gkabar_kap = 0
		}		
		soma[0] {	
			insert cadyn gcabar_cadyn = gca  eca = 120
			insert leak el_leak= -72  glbar_leak = 1.0*gleak   Ra=RaSoma cm = Cm // 2.5
			insert hd ghdbar_hd = ghd 
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = 3*gna
			insert nap gbar_nap = gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 //only in dend and apic
			insert sAHP gsAHPbar_sAHP = gsAHP
			insert im gbar_im = gm
			insert kap gkabar_kap = gkap
		}	
		dend[0] {  // need to add Spine Scale
			insert cadyn gcabar_cadyn = gca  eca = 120
			insert leak el_leak= -72  glbar_leak = gleak_dend  Ra=RaAll cm = Cm // 2.5
			insert hd ghdbar_hd = ghd
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = gna
			insert nap gbar_nap = 0 gbar_nap(1/(2*nseg)) = 1.0*gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 
			insert sAHP gsAHPbar_sAHP = 0
			insert im gbar_im = 0 gbar_im(1/(2*nseg)) = 1.0*gm
			insert kap gkabar_kap = gkap
		}
		
		forall {
			v=Vrest
			ena = 45
			ek = -80
			if (ismembrane("kdr") || ismembrane("kap") || ismembrane("kad")) {ek=-80}
			if (ismembrane("hd") ) {ehd_hd=-45 } // change from -30 to -50
		}
	
	//insert_mechs(100)	
	define_shape()// builtin fcn: fill in 3d info for sections defined by only L and diam, translate 3d points for consistency with their connections
	}//end init

	proc insert_mechs(){
		randseed = $1
		soma[0]{
			noiseRandObj=new Random()
			noiseRandObj.Random123(randseed)
			noiseRandObj.normal(0,1)

			noise = new Gfluct2(0.5)
			//0.0032 raise 
			noise.g_e0 = 0.002
			noise.g_i0 = 0.021
			noise.std_e = 0.001
			noise.std_i = 0.008
			// noise.tau_e = 10.0
			// noise.tau_i = 30.0

			//noise.g_e0 = 0.0032//0.0032
			//noise.std_e = 0.003//0.003
			//noise.g_e0 = 0.021
			//noise.std_e = 0.008
			noise.setRandObj(noiseRandObj)
		}
	}

	obfunc connect2target() { localobj nc
		soma nc = new NetCon(&v(0.5), $o1)
		nc.threshold = 0
		if (numarg() == 2) ($o2 = nc)
		return nc
	}	
endtemplate CP_Cell


/////====================/////
///// CS cell borrowed from Type C cell in LA  /////
/////===================/////
// Threshold ~ -56 mV  raise the input, rest ~-65 mV

{load_file("stdrun.hoc")}
{load_file("nrngui.hoc")}

begintemplate CS_Cell
	public soma, dend, apic, connect2target, type, insert_mechs
	create soma[1], dend[1], apic[1]
	strdef type

	public noise, noiseRandObj
	objref noise, noiseRandObj
	public all, somatic, basal, apical, axonal
    objref all, somatic, basal, apical, axonal  

	proc init() {
		type = "Cell_C"	

		all = new SectionList()
		somatic = new SectionList()
		basal = new SectionList()
		apical = new SectionList()
		
		soma[0] all.append()
		soma[0] somatic.append()
		dend[0] all.append()
		dend[0] basal.append()
		apic[0] all.append()
		apic[0] apical.append()

		gUnf_Xsoma = 2.5e-05
		Rm = 80000 // decreased overall
		SpineScale = 1.76371308 //2
		SpineScale_leak = 1.763714578
		Cm = 2.4 // 1.8 // 2 //1
		RaAll= 150//200
		RaSoma= 150 // 146.969697
		RaDend = 150
		RaAxIs = 150//100//200
		Vpas = -72//-65//-70 // -67

		//         Conductance values         //
		gna = 0.016
		gnap = 0.000555 // 0.000551 
		gkdr = 0.002//0.002 
		ghd = 1.5e-5//1.5e-5
		gca = 5.5e-4 
		gm = 0.00224 // 0.00222  
		gsAHP = 0.0002//0.0012
		gkap = 0.002 
		gleak = 2.5e-5 
		gleak_dend=1.57*3.0e-5
			
		nash=10
		Vrest = -70
		celsius = 31.0 
		
		/////// topology ////////
		connect dend[0](0), soma[0](0)
		connect apic[0](0), soma[0](1)
		
		/////// geometry ////////
		// dendrites along z axis
		Lsoma = 25.0
		Ldend = 270
		Lapic = 555
		soma[0] {
			diam = 24.75 nseg = 1
			pt3dadd(0,0,-Lsoma/2,diam)
			pt3dadd(0,0,Lsoma/2,diam)
		}		//{L = 20 diam = 20 nseg = 13}
		dend[0] {
			diam = 3 nseg = 8
			pt3dadd(0,0,0,diam)
			pt3dadd(0,0,-Ldend,diam)
		}     // 3.5
		apic[0] {
			diam = 5 nseg = 7
			pt3dadd(0,0,0,diam)
			pt3dadd(0,0,Lapic,diam)
		}
		
		access soma[0]
		//distance()
		
		apic[0] {
			insert cadyn gcabar_cadyn = gca eca = 120
			insert leak el_leak = -72  glbar_leak = gleak_dend Ra=RaDend cm = Cm // 2.5
			insert hd ghdbar_hd = ghd 
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = gna
			insert nap gbar_nap = 0  gbar_nap(1/(2*nseg)) = 0.8*gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 
			insert sAHP gsAHPbar_sAHP = 0
			insert im gbar_im = 0 gbar_im(1/(2*nseg)) = 0.8*gm
			insert kap gkabar_kap = 0
		}
		soma[0] {	
			insert cadyn gcabar_cadyn = gca  eca = 120
			insert leak el_leak= -72  glbar_leak = 1.0*gleak   Ra=RaSoma cm = Cm // 2.5
			insert hd ghdbar_hd = ghd 
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = 3*gna
			insert nap gbar_nap = gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 //only in dend and apic
			insert sAHP gsAHPbar_sAHP = gsAHP
			insert im gbar_im = gm
			insert kap gkabar_kap = gkap
		}
		dend[0] {  // need to add Spine Scale
			insert cadyn gcabar_cadyn = gca  eca = 120
			insert leak el_leak= -72  glbar_leak = gleak_dend  Ra=RaAll cm = Cm // 2.5
			insert hd ghdbar_hd = ghd
			insert na3 sh_na3=nash ar_na3=1	gbar_na3 = gna
			insert nap gbar_nap = 0 gbar_nap(1/(2*nseg)) = 1.0*gnap
			insert kdr gbar_kdr = gkdr
			insert capool taucas = 1000  fcas_capool = 0.05 
			insert sAHP gsAHPbar_sAHP = 0
			insert im gbar_im = 0 gbar_im(1/(2*nseg)) = 1.0*gm
			insert kap gkabar_kap = gkap
		}
		
		forall {
			v=Vrest
			ena = 45
			ek = -80
			if (ismembrane("kdr") || ismembrane("kap") || ismembrane("kad")) {ek=-80}
			if (ismembrane("hd") ) {ehd_hd=-45 } // change from -30 to -50
		}
	
	//insert_mechs(100)	
	define_shape()// builtin fcn: fill in 3d info for sections defined by only L and diam, translate 3d points for consistency with their connections
	}//end init

	proc insert_mechs(){
		randseed = $1
		soma[0]{
			noiseRandObj=new Random()
			noiseRandObj.Random123(randseed)
			noiseRandObj.normal(0,1)

			noise = new Gfluct2(0.5)
			noise.g_e0 = 0.002
			noise.g_i0 = 0.021
			noise.std_e = 0.001
			noise.std_i = 0.008
			// noise.tau_e = 10.0
			// noise.tau_i = 30.0

			//noise.g_e0 = 0.0032//0.0032
			//noise.std_e = 0.003//0.003
			//noise.g_e0 = 0.021
			//noise.std_e = 0.008
			noise.setRandObj(noiseRandObj)
		}
	}

	obfunc connect2target() { localobj nc
		soma nc = new NetCon(&v(0.5), $o1)
		nc.threshold = 0
		if (numarg() == 2) ($o2 = nc)
		return nc
	}	
endtemplate CS_Cell


/////////////////////// FSI_Cell //////////////////////////////
//Threshold ~-50 rest is ~-62 
begintemplate FSI_Cell
	public soma, dend, connect2target, type, insert_mechs
	create soma[1], dend[1]
	strdef type

	public noise, noiseRandObj
	objref noise, noiseRandObj
	public all, somatic, basal, apical, axonal
	objref all, somatic, basal, apical, axonal

	proc init() {
		type = "InterneuronCell"

		all = new SectionList()
		somatic = new SectionList()
		basal = new SectionList()
		apical = new SectionList()

		soma[0] all.append()
		soma[0] somatic.append()
		dend[0] all.append()
		dend[0] basal.append()

		/////// topology ////////
		connect dend[0](0), soma[0](1)

		/////// geometry ////////
		// dendrites along z axis
		Lsoma = 15.0
		Ldend = 150.0
		soma[0] {
			diam = 15.0 nseg = 1
			pt3dadd(0,0,-Lsoma/2,diam)
			pt3dadd(0,0,Lsoma/2,diam)
		}
		dend[0] {
			diam = 10 nseg = 1
			pt3dadd(0,0,0,diam)
			pt3dadd(0,0,Ldend,diam)
		}

		/////// biophysics //////
		soma[0] {
			cm = 1//1		    // (microF/cm2)
			Ra = 150*22.5	// (ohm-cm)
			Rm = 20000	    // (ohm-cm2)
			
			insert leakinter
			glbar_inter_leakinter = 1/Rm // (siemens/cm2)
			el_leakinter = -70	// (mV)

			insert nainter
			insert kdrinter
		}
		dend[0] {
			cm = 1//1		// (microF/cm2)
			Ra = 150	// (ohm-cm)
			Rm = 20000	// (ohm-cm2)
			
			insert leakinter
			glbar_inter_leakinter = 1/Rm // (siemens/cm2)
			el_leakinter = -70	// (mV)

			insert nainter
			insert kdrinter
		}

		soma[0] {
			ena = 45		// (mV)
			gnabar_nainter = 0.035	// (siemens/cm2)

			ek = -80		// (mV)
			gkdrbar_kdrinter = 0.008 // (siemens/cm2)
		}
		dend[0] {
			ena = 45		// (mV)
			gnabar_nainter = 0.010	// (siemens/cm2)

			ek = -80		// (mV)
			gkdrbar_kdrinter = 0.003 // (siemens/cm2)
			
			insert ca_ion
			eca = 120
		}

		define_shape()// builtin fcn: fill in 3d info for sections defined by only L and diam, translate 3d points for consistency with their connections	
	}//end init

	proc insert_mechs(){
		randseed = $1
		soma[0]{
			noiseRandObj=new Random()
			noiseRandObj.Random123(randseed)
			noiseRandObj.normal(0,1)

			soma noise = new Gfluct2(0.5)
			noise.g_e0 = 0.00121
			noise.g_i0 = 0.00573
			noise.std_e = 0.00012
			noise.std_i = 0.00264
			// noise.tau_e = 10.0
			// noise.tau_i = 30.0

			//noise.g_e0 = 0.0032//0.0032
			//noise.std_e = 0.003//0.003
			//noise.g_e0 = 0.021
			//noise.std_e = 0.008
			noise.setRandObj(noiseRandObj)
		}
	}

	obfunc connect2target() { localobj nc
		soma nc = new NetCon(&v(0.5), $o1)
		nc.threshold = 0
		if (numarg() == 2) ($o2 = nc)
		return nc
	}
endtemplate FSI_Cell

/////////////////////// LTS_Cell //////////////////////////////
//back off on noise a little
begintemplate LTS_Cell
	public NumSoma, NumDend, connect2target, insert_mechs
	NumSoma = 1
	NumDend = 2

	public soma, dend
	create soma[NumSoma], dend[NumDend]

	public noise, noiseRandObj
	objref noise, noiseRandObj
	public all, somatic, basal, apical, axonal
	objref all, somatic, basal, apical, axonal
    
    proc init() {
		all = new SectionList()
		somatic = new SectionList()
		basal = new SectionList()
		apical = new SectionList()
		axonal = new SectionList()

		NumSoma = 1
		NumDend = 2
		for i = 0, NumSoma-1 soma[i] {
			all.append()
			somatic.append()
		}
		for i = 0, NumDend-1 dend[i] {
			all.append()
			basal.append()
		}

		// Rm = 80000
		// Cm = 2.4 // 1.8 // 2 //1
		// RaAll= 150//200
		// RaSoma= 150 // 146.969697
		// RaDend = 150
		// Vpas = -60
		// v_init = -60

		//Parameters.
		gnat = 0.08 //0.08 //0.06
		ghd = 0 //1.0e-5 //1.0e-5
		gkdr = 0.026 //0.04 //0.065 //0.03 //0.015
		gsahp = 0 //0.0006 //0.001 //0.005 
		gnap = 0.0014 //0.0022 //0.0022 //0.0013 //0.0009 //0.00065
		gcal = 0 //0.017 //0.005 //0.017 //0.017 

		gim  = 0.0015 //0.005 //0.007 //0.00501 //0005 //0.007 //0.009
		gcas = 0 //0.003 //0.0005 //0.0005 //0.0005

		/////// topology ////////
		connect dend[0](0), soma[0](0)
		connect dend[1](0), soma[0](1)

		/////// geometry ////////
		// dendrites along z axis
		Lsoma = 20.0
		Ldend = 250.0
		soma[0] {
			diam = 10.0 nseg = 1
			pt3dadd(0,0,-Lsoma/2,diam)
			pt3dadd(0,0,Lsoma/2,diam)
		}
		dend[0] {
			diam = 3 nseg = 1
			pt3dadd(0,0,0,diam)
			pt3dadd(0,0,-Ldend,diam)
		}
		dend[1] {
			diam = 3 nseg = 1
			pt3dadd(0,0,0,diam)
			pt3dadd(0,0,Ldend,diam)
		}

		/////// biophysics //////
		soma[0]{
			insert leakCA3 
			el_leakCA3 = -60
			glbar_leakCA3 = 6e-5 
			Ra = 150 
			cm = 1 // 2.5

			insert capoolCA3

			insert calCA3
			gcalbar_calCA3 = gcal

			insert natCA3  
			gbar_natCA3 = gnat

			insert napCA3//0.0
			gbar_napCA3 = gnap 

			insert hdCA3 
			ghdbar_hdCA3 = ghd

			insert kdrCA3 
			gbar_kdrCA3 = gkdr

			insert sAHPCA3
			gsAHPbar_sAHPCA3 = gsahp

			insert imCA3
			gbar_imCA3 = gim

			insert cass
			gbar_cass = gcas

			ena=45  ek=-80  ehd=-45  eca = 134		
		}
		for i = 0, NumDend-1 dend[i] {
			insert capoolCA3

			insert calCA3
			gcalbar_calCA3 = gcal

			insert leakCA3 
			el_leakCA3 = -60  
			glbar_leakCA3 = 6e-5 
			Ra = 150 
			cm = 1.3

			insert natCA3  
			gbar_natCA3 = gnat

			insert napCA3
			gbar_napCA3 = gnap 

			insert hdCA3 
			ghdbar_hdCA3 = ghd

			insert kdrCA3 
			gbar_kdrCA3 = gkdr

			insert sAHPCA3
			gsAHPbar_sAHPCA3 = gsahp

			insert imCA3
			gbar_imCA3 = gim

			insert cass
			gbar_cass = gcas

			ena=45  ek=-80  ehd=-45  eca = 134
		}

		define_shape()// builtin fcn: fill in 3d info for sections defined by only L and diam, translate 3d points for consistency with their connections
	}

	proc insert_mechs(){
		randseed = $1
		soma[0]{
			noiseRandObj=new Random()
			noiseRandObj.Random123(randseed)
			noiseRandObj.normal(0,1)

			noise = new Gfluct2(0.5)
			noise.g_e0 = 0.000121//TB7/31/21
			noise.g_i0 = 0.00573
			noise.std_e = 0.000012
			noise.std_i = 0.00264
			// noise.tau_e = 10.0
			// noise.tau_i = 30.0

			//noise.g_e0 = 0.0032//0.0032
			//noise.std_e = 0.003//0.003
			//noise.g_e0 = 0.021
			//noise.std_e = 0.008
			noise.setRandObj(noiseRandObj)
		}
	}

    obfunc connect2target() { localobj nc
		soma nc = new NetCon(&v(0.5), $o1)
		nc.threshold = 0
		if (numarg() == 2) ($o2 = nc)
		return nc
	}                                       
endtemplate LTS_Cell